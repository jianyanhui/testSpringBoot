https://blog.csdn.net/wangpeng047/article/details/7173202


递归函数，是指某一函数内部自己直接或间接地调用自己，即直接递归和间接递归。是语言中比较高级的技术用法。

递归函数之所以难，是因为是一种过于抽象化的技术，写代码的时候无法直观的看出逻辑是否符合自己要求，因此想一次性写好递归函数，是一件很困难的事情，必须要程序运作起来执行递归函数的代码才能看出是否正确，而且进行测试的难度也很高，有时的隐含bug可能要软件上线后才会渐渐体现出来。

笔者写过几次较为复杂的递归函数，总结出了一些写递归函数的技巧和方法，这里特地拿出来给大家分享，如果各位还有更好的想法，欢迎多加指点。

首先，要分析清楚满足递归的条件，并一一列出。

这点十分重要，它是执行递归函数的前提，你写之前就一定要想清楚什么时候（条件）这个函数会自己调自己，为了防止疏漏条件，最好把所有满足递归的条件都列在纸上或者文档上，一定要尽可能的全面。因为我们经常容易漏掉某一种满足条件，那么结果自然就会不正确。

其次，要分析不满足条件时的处理方式。

在列出了所有条件后，我们自然还要考虑不满足条件后的结果，一种是业务本身要求的不满足条件后的处理，另一种就是出现错误时候的处理。说的简单点，就是正确的情景考虑到了后还要考虑错误的情景。

接下来，要分析递归函数的返回值。

如果递归函数有返回值，那么每执行完一次递归函数后，上一递归函数如何接收、处理该递归函数的返回值。

最后，写完递归函数后一定要进行单元测试，测试也要有方法。

因此难以保障一次写完后正确性，所以写完后一定要测试，递归函数本身测试也很麻烦，递归次数少倒还好，递归次数一旦多的话就很头疼。这时我们可以将循环的次数，以及递归的后的结果打印出来，看看打印后的结果是否符合自己的预期，如果某一递归出现问题，可以根据循环次数的记录在调试的时候直接定位，这样效率会高很多，也容易很多，要不然一步步调试看，实在是折磨人。测试的时候一定要涉及到所有满足递归的条件，每一条件分支都要检查一遍，这样才是较为全面的测试递归的方法。

写递归函数，不是一下两下能搞定的事情，本身就是一个反复性工作，编写→测试→编写→测试→...，所以在分析、编写的时候一定要静心、细心，不要急躁，这样渐渐的递归函数也就健全起来。头几次写递归函数可能写不好，日后多多练习便会慢慢深刻体会到递归的精髓。

那么我想说的也说完了，希望这篇文章能对大家有帮助。